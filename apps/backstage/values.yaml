global:
  # -- Global Docker image registry
  imageRegistry: ""

  # -- Global Docker registry secret names as an array
  # </br> E.g. `imagePullSecrets: [myRegistryKeySecretName]`
  imagePullSecrets: []

backstage:
  imageRegistry:
    registry: "ghcr.io"
    repository: "fede-r1c0/backstage"
    tag: "latest"
    pullPolicy: "IfNotPresent"

  # -- Number of deployment replicas
  replicas: 1

  # -- Backstage container command
  command: ["node", "packages/backend"]

  # -- Resource requests/limits
  resources:
    limits:
      memory: 256Mi
      cpu: 200m
    requests:
      memory: 64Mi
      cpu: 100m

  livenessProbe:
    timeoutSeconds: 5
    failureThreshold: 5
    initialDelaySeconds: 30
  readinessProbe:
    timeoutSeconds: 5
    failureThreshold: 5
    initialDelaySeconds: 30
  startupProbe:
    timeoutSeconds: 5
    failureThreshold: 10
    initialDelaySeconds: 60

service:
  type: LoadBalancer

postgresql:
  enabled: true
  # -- The authentication details of the Postgres database
  auth:
    # -- Name for a custom user to create
    username: bn_backstage

    # -- Password for the custom user to create
    password: ""

    # -- Name of existing secret to use for PostgreSQL credentials
    existingSecret: "backstage-secret"

    # -- The secret keys Postgres will look for to retrieve the relevant password
    secretKeys:
      # -- The key in which Postgres will look for, for the admin password, in the existing Secret
      adminPasswordKey: admin-password

      # -- The key in which Postgres will look for, for the user password, in the existing Secret
      userPasswordKey: user-password

      # -- The key in which Postgres will look for, for the replication password, in the existing Secret
      replicationPasswordKey: replication-password

  # -- PostgreSQL architecture (`standalone` or `replication`)
  architecture: standalone
